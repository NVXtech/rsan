#
# Funções auxiliarias para criar os datasets do IBGE
#

# CONSTANTS --------------------------------------------------------------------

# FTP dados de população

# Censo
censo_url <- "ftp.ibge.gov.br/Censos/"
censo_suffix <- "Censo_Demografico_%s/resultados/"
censo_file <- "^total_populacao_.*.zip"

# Estimativas de população
estimativa_pop_url <- "ftp.ibge.gov.br/Estimativas_de_Populacao/"
estimativa_pop_suffix <- "/Estimativas_%s/"
estimativa_pop_file <- "estimativa_dou_%s.xls"

#' List of files/folders in a FTP folder
#'
#' @param URL
#'
#' @return list of files and folders
#' @export
#'
#' @examples
#' \dontrun{
#' listFilesFromFTP("ftp.ibge.gov.br")
#' listFilesFromFTP("ftp.ibge.gov.br/Censos/")
#' }
listFilesFromFTP <- function(URL) {
  listFiles <- curl::new_handle()
  curl::handle_setopt(listFiles, ftp_use_epsv = TRUE, dirlistonly = TRUE)
  con <-
    curl::curl(url = paste0("ftp://", URL), "r", handle = listFiles)
  files <- readLines(con)
  close(con)
  return(files)
}


#' Lista de anos de população estimada pelo Censo
#' que estão disponíveis para download no ftp do IBGE
#'
#' @param URL
#'
#' @return lista de anos do censo disponíveis
#' @export
#'
#' @examples
#' \dontrun{
#' get_censo_years()
#' }
get_censo_years <- function() {
  files <- listFilesFromFTP(censo_url)
  output <- c()
  for (file in files) {
    if (grepl("^Censo_Demografico.*", file)) {
      only_number <- gsub("Censo_Demografico_", "", file)
      year <- strtoi(only_number)
      output <- c(output, year)
    }
  }
  return(output)
}


#' Cria conjunto de dados do censo IBGE
#'
#' @return Dataframe com informações dos conjuntos de dados baixados
#' @export
#'
#' @examples
#' \dontrun{
#' downloadCensoRawData()
#' }
downloadCensoRawData <- function() {
  years <- get_censo_years()
  # Anos anteriores a 2010 não são suportados
  years <- years[years >= 2010]
  colNames <-
    c(
      "codigo_municipio",
      "municipio",
      "populacao_total_anterior",
      "populacao_masculina",
      "populacao_feminina",
      "populacao_urbana",
      "populacao_rural",
      "populacao_total"
    )
  colTypes <-
    c(
      "numeric",
      "text",
      "numeric",
      "numeric",
      "numeric",
      "numeric",
      "numeric",
      "numeric"
    )
  nome <- c()
  ano <- c()
  caminho <- c()
  tipo <- c()
  for (year in years) {
    URL <- paste0(censo_url, sprintf(censo_suffix, year))
    files <- listFilesFromFTP(URL)
    files <- files[grepl(censo_file, files)]
    df_censo <- dplyr::data_frame()
    for (file in files) {
      url_to_download <- paste0(URL, file)
      destfile <- tempfile()
      tmp_dir <- tempdir()
      curl::curl_download(url_to_download, destfile)
      utils::unzip(destfile, exdir = tmp_dir)
      unlink(destfile)
      xls_filename <- file.path(tmp_dir, gsub("\\.zip$", ".xls", file))
      df <- readxl::read_xls(
        xls_filename,
        skip = 1,
        col_names = colNames,
        col_types = colTypes
      )
      df_censo <- dplyr::bind_rows(df_censo, df)
      unlink(xls_filename)
    }
    # Remove NA (rodape do xls)
    df_censo <- df_censo[stats::complete.cases(df_censo), ]
    filename_out <- file.path(get_data_dir(), sprintf("populacao_censo_%s.rda", year))
    save(df_censo, file = filename_out)
    ano <- c(ano, year)
    caminho <- c(caminho, sprintf("populacao_censo_%s", year))
    tipo <- c(tipo, "CENSO")
    nome <- c(nome, sprintf("%s - Censo", year))
  }
  return(data.frame(nome, tipo, ano, caminho))
}


#' Lista de anos disponíveis de estimativas de população por amostra do IBGE
#'
#' @return Lista de anos disponíveis
#' @export
#'
#' @examples
#' \dontrun{
#' load_estimativa_years()
#' }
load_estimativa_years <- function() {
  files <- listFilesFromFTP(estimativa_pop_url)
  output <- c()
  for (file in files) {
    if (grepl("^Estimativas_.*", file)) {
      only_number <- gsub("Estimativas_", "", file)
      year <- strtoi(only_number)
      if (year >= 2019) {
        output <- c(output, year)
      }
    }
  }
  return(output)
}

#' Cria conjunto de dados de estimativas populacionais por município do IBGE
#'
#' @return Um data.frame() contendo a lista de estimativas criadas
#' @export
#'
#' @examples
#' \dontrun{
#' downloadEStimativaPopRawData()
#' }
downloadEstimativaPopRawData <- function() {
  nome <- c()
  ano <- c()
  caminho <- c()
  tipo <- c()
  for (year in load_estimativa_years()) {
    URL <-
      paste0(estimativa_pop_url, estimativa_pop_suffix, estimativa_pop_file)
    URL <- sprintf(URL, year, year)
    file_name <- sprintf(estimativa_pop_file, year)
    destfile <- tempfile()
    if (file.exists(destfile)) {
      unlink(destfile)
    }
    curl_download(URL, destfile)
    populacao_estimada <- readxl::read_xls(destfile, skip = 1, sheet = 2)
    # Remove NA (rodape do xls)
    populacao_estimada <- populacao_estimada[stats::complete.cases(populacao_estimada), ]
    filename_out <- file.path(get_data_dir(), sprintf("populacao_estimada_%s.rda", year))
    unlinK(destfile)
    save(populacao_estimada, file = filename_out)
    ano <- c(ano, year)
    caminho <- c(caminho, sprintf("populacao_estimada_%s", year))
    tipo <- c(tipo, "ESTIMATIVA")
    nome <- c(nome, sprintf("%s - Estimativa", year))
  }
  return(data.frame(nome, tipo, ano, caminho))
}

#' Baixa e salva os dados de população
#'
#' @return 1 quando ok, NULL quando falha
#' @export
#'
#' @examples
#' \dontrun{
#' create_populacoes()
#' }
create_populacoes <- function() {
  df_censo <- downloadCensoRawData()
  df_estimativa <- downloadEstimativaPopRawData()
  populacoes <- rbind(df_censo, df_estimativa)
  save(populacoes, file = file.path(get_data_dir(), "populacoes.rda"))
  return(1)
}
