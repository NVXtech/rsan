for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaESgoto_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE, row.names = NULL, dec=",")
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
View(snis)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaESgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaESgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read_csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
#snis <- dplyr::rename_all(snis, new_names)
rm(list=ls())
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaESgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
View(snis)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
#colnames(snis) <- new_names
print(snis)
#snis <- dplyr::rename_all(snis, new_names)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- read.csv2(file_path_out, check.names = FALSE)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(snis) <- new_names
print(snis)
rm(list=ls())
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
fix_snis_csv(file_path, file_path_out)
#snis <- read.csv2(file_path, fileEncoding="UTF-16LE", check.names = FALSE, row.names = NULL, dec=",")
snis <- readr::read_csv2(file_path_out)
names <- colnames(snis)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(snis) <- new_names
print(snis)
View(snis)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(data) <- new_names
return(data)
}
fix_snis_csv(file_path, file_path_out)
snis <- readr::read_csv2(file_path_out)
snis <- fix_snis_colnames(snis)
print(snis)
View(snis)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(data) <- new_names
return(data)
}
fix_snis_csv(file_path, file_path_out)
snisAE2020 <- readr::read_csv2(file_path_out)
snisAE2020 <- fix_snis_colnames(snis2020)
usethis::use_data(snisAE2020, overwrite=TRUE)
data(^snisAE2020)
data("snisAE2020")
View(snisAE2020)
View(snisAE2020)
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
data(""snisAE2020"")
data("snisAE2020")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(data) <- new_names
return(data)
}
file_path <- file.path("data-raw", "SNISConsolidadoMunicipio2020.csv")
file_path_out <- file.path("data-raw", "SNISConsolidadoMunicipio2020_corrigido.csv")
fix_snis_csv(file_path, file_path_out)
snis2020 <- readr::read_csv2(file_path_out)
snis2020 <- fix_snis_colnames(snis2020)
usethis::use_data(snis2020, overwrite=TRUE)
View(snis2020)
load("~/rsan/R/data/populacao.rda")
View(populacao)
runApp('R')
load("~/rsan/R/data/snis_2020.rda")
View(df_snis)
rm(list=ls())
runApp('R')
runApp('R')
?load_data
runApp('R')
