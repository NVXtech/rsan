file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(data) <- new_names
return(data)
}
fix_snis_csv(file_path, file_path_out)
snis <- readr::read_csv2(file_path_out)
snis <- fix_snis_colnames(snis)
print(snis)
View(snis)
file_path <- file.path("data-raw", "SNIS2020AguaESgoto.csv")
file_path_out <- file.path("data-raw", "SNIS2020AguaEsgoto_corrigido.csv")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(data) <- new_names
return(data)
}
fix_snis_csv(file_path, file_path_out)
snisAE2020 <- readr::read_csv2(file_path_out)
snisAE2020 <- fix_snis_colnames(snis2020)
usethis::use_data(snisAE2020, overwrite=TRUE)
data(^snisAE2020)
data("snisAE2020")
View(snisAE2020)
View(snisAE2020)
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
data(""snisAE2020"")
data("snisAE2020")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
colnames(data) <- new_names
return(data)
}
file_path <- file.path("data-raw", "SNISConsolidadoMunicipio2020.csv")
file_path_out <- file.path("data-raw", "SNISConsolidadoMunicipio2020_corrigido.csv")
fix_snis_csv(file_path, file_path_out)
snis2020 <- readr::read_csv2(file_path_out)
snis2020 <- fix_snis_colnames(snis2020)
usethis::use_data(snis2020, overwrite=TRUE)
View(snis2020)
load("~/rsan/R/data/populacao.rda")
View(populacao)
runApp('R')
load("~/rsan/R/data/snis_2020.rda")
View(df_snis)
rm(list=ls())
runApp('R')
runApp('R')
?load_data
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
rm(list=ls())
rm(list=ls())
runApp('R')
runApp('R')
shiny::runApp('R')
runApp()
runApp('R')
runApp()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
data("snis2020")
data("snis2020")
#' Corrige CSV baixado do SNIS
#' 1. Converte para UTF-8
#' 2. Remove separador (;) no final da linha
#' 3. Remove a linha de TOTAL
#' @param filename
#' @param newfilename
#'
#' @return
#' @export
#'
#' @examples
#' fix_snis_csv("snis.csv", "snis_corrigido.csv")
fix_snis_csv <- function(filename, newfilename){
conn <- file(file_path, open="r",encoding="UTF-16LE" )
connout <- file(newfilename, open="w")
linn <-readLines(conn)
for (i in 1:length(linn)){
if (grepl("^TOTAL",linn[i]))
next
writeLines(gsub(";$", "", linn[i]), con=connout)
}
close(conn)
close(connout)
}
#' Repara nomes das colunas do SNIS
#' deixa somente os códigos
#'
#' @param data
#'
#' @return Um tibble(). Contendo os dados do SNIS
#' @export
#'
#' @examples
fix_snis_colnames <- function(data){
names <- colnames(data)
new_names <- c()
for (name in names){
new_name <- stringr::str_trim(strsplit(name, '-')[[1]][1])
new_names <- c(new_names, new_name)
}
new_names[match(new_names,"Código do IBGE")] <- "codigo_municipio"
colnames(data) <- new_names
data["codigo_municipio"] <- as.character(data["codigo_municipio"])
return(data)
}
file_path <- file.path("data-raw", "SNISConsolidadoMunicipio2020.csv")
file_path_out <- file.path("data-raw", "SNISConsolidadoMunicipio2020_corrigido.csv")
fix_snis_csv(file_path, file_path_out)
snis2020 <- readr::read_csv2(file_path_out)
snis2020 <- fix_snis_colnames(snis2020)
usethis::use_data(snis2020, overwrite=TRUE)
load("~/rsan/data/snis2020.rda")
runApp('R')
View(app_state)
View(app_state[["modulo_demografico"]][["resutado"]])
View(snis2020)
View(snis2020)
View(snis2020)
source("~/rsan/data-raw/snis.R", echo=TRUE)
problems()
warningS()
load("~/rsan/data/snis2020.rda")
View(snis2020)
source("~/rsan/data-raw/snis.R", echo=TRUE)
source("~/rsan/data-raw/snis.R", echo=TRUE)
runApp('R')
View(app_state)
View(app_state)
View(app_state[["modulo_demografico"]][["resutado"]])
?full_join]
?full_join
df <- full_join(
populacao_total,
populacao_urbana,
by = "codigo_municipio"
suffix = c("_total", "_urbana")
)
runApp('R')
runApp('R')
runApp('R')
View(app_state)
View(app_state)
View(app_state)
View(app_state)
View(app_state)
View(app_state)
View(app_state)
View(app_state)
View(app_state[["modulo_demografico"]][["resutado"]])
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
?read_xlsx
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
View(projeto_coleta_esgoto)
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
rm(list=ls())
load("~/rsan/data/sinapi202112.rda")
View(sinapi202112)
View(sinapi202112)
data("projeto_coleta_esgoto")
?left_join
rm(list=ls())
runApp('R')
runApp('R')
data("projeto_coleta_esgoto")
runApp('R')
data("projeto_tratamento_esgoto")
data("projeto_producao_agua")
data("projeto_ditribuicao_agua")
runApp('R')
runApp('R')
a <- "b"
get("a")
runApp('R')
runApp('R')
source("~/rsan/R/data_projeto.R", echo=TRUE)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
projeto <- "projeto_coleta_esgoto"
get(projeto)
as.character("123132")
runApp('R')
runApp('R')
runApp('R')
rm(list=ls())
runApp('R')
debugSource("~/rsan/R/data_projeto.R", echo=TRUE)
runApp('R')
?data
runApp('R')
runApp('R')
data()
data(package='rsan')
data(package=`rsan`)
try(data(package=`rsan`))
try(data(package=`rsan`), silent=# Mon May 30 16:28:22 2022 ------------------------------)
try(data(package=`rsan`), silent=TRUE)
)
try(data(package=`rsan`), silent=TRUE)
data(package = .packages(all.available = TRUE))
data()
runApp('R')
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
runApp('R')
runApp('R')
runApp('R')
source("data_helpers.R")
runApp('R')
runApp('R')
runApp('R')
setwd("~/rsan/R")
data(projeto_coleta_esgoto)
data("projeto_coleta_esgoto")
data("projeto_coleta_esgoto")
setwd("~/rsan")
library(rsan)
library(curl)
?bind_rows
?complete.cases
?mutate
?quantile
?IQR
library(stats)
?lm
?exp
?predict
?setNames
?full_join
?strtoi
?unzip
?tibble
read_xls
read_xls
read_xls
read_xls
read_xls
?read_xls
??read_xls
?httr
??httr
tibble(df)
?tibble
tibble::tibble(a)
usethis.use_package("tibble")
usethis::use_package("tibble")
as.tibble()
library(rsan)
?snis2020
load("~/rsan/data/sinapi202112.rda")
View(sinapi202112)
?calcula_projecao
?mutate
library(rsan)
library(rsan)
?calculate_geografico
?rsan::calculate_geografico
rsan::calculate_geografico
library(rsan)
library(rsan)
states_acronym()
library(rsan)
library(rsan)
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
?calcula_precos_distribuicao
library(rsan)
?calcula_precos_distribuicao
source("~/rsan/data-raw/projeto_tipo.R", echo=TRUE)
load("~/rsan/data/projeto_tratamento_esgoto.rda")
View(projeto_tratamento_esgoto)
library(rsan)
library(rsan)
usethis::use_testthat()
usethis::use_testthat()
usethis::use_test()
usethis::use_testthat()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?ifelse
devtools::test()
devtools::test()
df
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(rsan)
?classifica_municipio
?classifica_municipio
?classifica_municipio
?classifica_municipio
library(rsan)
library(rsan)
?classifica_municipio
?classifica_municipio
library(rsan)
?classifica_municipio
?classifica_municipio
library(rsan)
?classifica_municipio
library(rsan)
library(rsan)
?classifica_municipio
?classifica_municipio
library(rsan)
?classifica_municipio
library(rsan)
library(rsan)
?classifica_municipio
?tibble
?tibble
?dplyr::tibble
?tibble
?tibble()
?tibble::tibble()
?tbl_df
?tbl_df_class
?tbl_df class
?tibble::tbl_df
library(rsan)
?join_all
?full_join
?rename
library(rsan)
library(rsan)
devtools::load_all(".")
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
library(rsan)
rlnorm(1)
rlnorm(100)
"AC"*2
rep("AC",10)
devtools::test()
devtools::test()
data(municipio, package='rsan')
load("~/rsan/data/municipio.rda")
View(municipio)
data(municipio, package='rsan')
?left_join
devtools::test()
?colnames
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(rsan)
